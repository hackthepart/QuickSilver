/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package typeracer_game;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;

/**
 *
 * @author Rashi
 */
public class Game extends javax.swing.JFrame {

    float current_speed;

    String users_word;
    int flag = 0;
    int start_time;
    int end_time;
    String para = null;
    int space = 0, error_count = 0;
    int count = 0, totalWords;
    StringTokenizer words;
    String correct_word = "";

    /**
     * Creates new form NewJFrame
     */
    public Game() {
        initComponents();
        showPara();
        paraTextPane.setEditable(false);
        currentInputTF.requestFocus(true);
        words = new StringTokenizer(para);
        totalWords = words.countTokens();
        start_time = (int) System.currentTimeMillis();
    }

    private void showPara() {
        String thisLine = null;
        int a;
        a = (int) (Math.random() * 10);
        System.out.println("a is " + a);
        try {
            // open input stream Para.txt for fetching require pragraphs.
            // Here paragraphs are stored as single lines.
            BufferedReader buffRdr = new BufferedReader(new FileReader(
                    "Para.txt"));
            while ((thisLine = buffRdr.readLine()) != null) {
                char ch = thisLine.charAt(0);
                thisLine = thisLine.substring(1);

                int ch1 = (ch - '0');
                if (ch1 == a) {
                    para = "";
                    para = para + thisLine;
                    System.out.println(para);
                    paraTextPane.setText(para);
                    paraTextPane.setForeground(Color.green);
                    paraTextPane.setBackground(Color.black);
                    return;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        finishButton = new javax.swing.JButton();
        currentInputTF = new javax.swing.JTextField();
        paraDisplayer = new javax.swing.JScrollPane();
        paraTextPane = new javax.swing.JTextPane();
        speedLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        finishButton.setText("Finish");
        finishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishButtonActionPerformed(evt);
            }
        });

        currentInputTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                currentInputTFKeyTyped(evt);
            }
        });

        paraTextPane.setEditable(false);
        paraDisplayer.setViewportView(paraTextPane);

        speedLabel.setText("Current Speed (WPM) : 0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(currentInputTF, javax.swing.GroupLayout.DEFAULT_SIZE, 597, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addComponent(finishButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(paraDisplayer, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(speedLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paraDisplayer, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(currentInputTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(finishButton)
                .addGap(47, 47, 47)
                .addComponent(speedLabel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void finishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishButtonActionPerformed
        JOptionPane.showMessageDialog(rootPane, "You exit without completing game!!!");
        this.setVisible(false);
        GameStarter obj = new GameStarter();
        obj.setVisible(true);
    }//GEN-LAST:event_finishButtonActionPerformed

    private void currentInputTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_currentInputTFKeyTyped

        char ch = evt.getKeyChar();
        System.out.print(ch);
        if (ch == KeyEvent.VK_SPACE) //Matches word whenever you press space
        {
            space++;
            float itime = (int) System.currentTimeMillis();
            current_speed = space / ((float) (itime - start_time) / 1000f);
            System.out.printf("Curent_speed is: %.2f", current_speed);
            speedLabel.setText("Current Speed (WPM) : " + Math.ceil(current_speed*60.0));
            speedLabel.paintImmediately(speedLabel.getVisibleRect());
            users_word = currentInputTF.getText();
            users_word = users_word.trim();
            if (flag == 0) {
                correct_word = words.nextToken();
                flag = 1;
            }
            if (users_word.equals(correct_word)) {
                currentInputTF.setBackground(Color.WHITE);
                System.out.println("word matched");
                count++;
                if (words.hasMoreTokens()) {
                    correct_word = words.nextToken();
                } else {                                         //The game is over.
                    end_time = (int) System.currentTimeMillis();
                    System.out.println("you are done");
                    float time = (end_time - start_time) / 1000f;
                    System.out.println("time is" + time + " " + space + " " + error_count);
                    float speed = (float) space / ( (float) time / 60);
                    Math.ceil(speed);
                    System.out.println("speed in words per minute: " + speed);
                    float accuracy = (float) ((float) (space - error_count) / (float) space) * 100;
                    accuracy = (float) Math.ceil(accuracy);
                    System.out.println("accuracy is" + accuracy);
                    JOptionPane.showMessageDialog(null, "your accuracy is:" + accuracy + "   " + "\nyour typing speed is: " + Math.ceil(speed) + " WPM");
                    this.setVisible(false);
                    GameStarter obj = new GameStarter();
                    obj.setVisible(true);
                }
            } else {
                error_count++;
                currentInputTF.setBackground(Color.red);
                JOptionPane.showMessageDialog(rootPane, "Typing error");
            }

            users_word = "";
            currentInputTF.setText("");
        }


    }//GEN-LAST:event_currentInputTFKeyTyped

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField currentInputTF;
    private javax.swing.JButton finishButton;
    private javax.swing.JScrollPane paraDisplayer;
    private javax.swing.JTextPane paraTextPane;
    private javax.swing.JLabel speedLabel;
    // End of variables declaration//GEN-END:variables
}
