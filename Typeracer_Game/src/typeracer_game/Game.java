/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package typeracer_game;

import com.sun.jmx.defaults.JmxProperties;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rashi
 */
public class Game extends javax.swing.JFrame {

    static Socket socket;
    static DataInputStream in;
    static DataOutputStream out;
    float current_speed;
    String users_word;
    int flag = 0;
    int start_time;
    int end_time;
    String para = null;
    int space = 0, error_count = 0;
    int count = 0, totalWords;
    StringTokenizer words;
    String correct_word = "";
    String playerName, message;
    int port;
    DefaultTableModel model;
    int pID;
    int[] pids;
    /**
     * Creates new form NewJFrame
     */
    public Game(String playerName) throws IOException {
        initComponents();
        showPara();
        this.playerName = playerName;
        port = 9999;
        pids = new int[100];
        model = (DefaultTableModel)leaderboardTable.getModel();
        playerNameLabel.setText(playerName);
        paraTextPane.setEditable(false);
        currentInputTF.requestFocus(true);
        words = new StringTokenizer(para);
        totalWords = words.countTokens();
        socket = new Socket("127.0.0.1",9999);
        in = new DataInputStream(socket.getInputStream());
        out = new DataOutputStream(socket.getOutputStream());
        Input input = new Input(in, this);
        Thread thread = new Thread(input);
        thread.start();
        out.writeUTF(playerName);
        pID = in.readInt();
        typedTextPane.setAutoscrolls(true);
        start_time = (int) System.currentTimeMillis();
    }
    
    void UpdateLeaderboard(String playerName, int speed, int pID){
        model.setValueAt(playerName, pID, 0);
        model.setValueAt(speed, pID, 1);
    }

    private void showPara() {
        String thisLine = null;
        int a;
        a = (int) (Math.random() * 10);
        System.out.println("a is " + a);
        try {
            // open input stream Para.txt for fetching require pragraphs.
            // Here paragraphs are stored as single lines.
            BufferedReader buffRdr = new BufferedReader(new FileReader(
                    "Para.txt"));
            while ((thisLine = buffRdr.readLine()) != null) {
                char ch = thisLine.charAt(0);
                thisLine = thisLine.substring(1);

                int ch1 = (ch - '0');
                if (ch1 == a) {
                    para = "";
                    para = para + thisLine;
                    System.out.println(para);
                    paraTextPane.setText(para);
                    paraTextPane.setForeground(Color.green);
                    paraTextPane.setBackground(Color.black);
                    return;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        finishButton = new javax.swing.JButton();
        currentInputTF = new javax.swing.JTextField();
        paraDisplayer = new javax.swing.JScrollPane();
        paraTextPane = new javax.swing.JTextPane();
        speedLabel = new javax.swing.JLabel();
        playerNameLabel = new javax.swing.JLabel();
        tableScrollPane = new javax.swing.JScrollPane();
        leaderboardTable = new javax.swing.JTable();
        typedScrollPane = new javax.swing.JScrollPane();
        typedTextPane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        finishButton.setText("Finish");
        finishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishButtonActionPerformed(evt);
            }
        });

        currentInputTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                currentInputTFKeyTyped(evt);
            }
        });

        paraTextPane.setEditable(false);
        paraDisplayer.setViewportView(paraTextPane);

        speedLabel.setText("Current Speed (WPM) : 0");

        playerNameLabel.setText("Name : Nil");

        leaderboardTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Speed (WPM)"
            }
        ));
        tableScrollPane.setViewportView(leaderboardTable);

        typedScrollPane.setViewportView(typedTextPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paraDisplayer)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(currentInputTF)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(speedLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE))
                                    .addComponent(playerNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(106, 106, 106)
                                .addComponent(finishButton))
                            .addComponent(typedScrollPane))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paraDisplayer, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(currentInputTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(typedScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(playerNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(speedLabel)
                            .addComponent(finishButton)))
                    .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void finishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishButtonActionPerformed
        JOptionPane.showMessageDialog(rootPane, "You exit without completing game!!!");
        this.setVisible(false);
        GameStarter obj = new GameStarter();
        obj.setVisible(true);
    }//GEN-LAST:event_finishButtonActionPerformed

    private void currentInputTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_currentInputTFKeyTyped
        currentInputTF.setBackground(Color.white);
        char ch = evt.getKeyChar();
        System.out.print(ch);
        if (ch == KeyEvent.VK_SPACE) //Matches word whenever you press space
        {
            space++;
            float itime = (int) System.currentTimeMillis();
            current_speed = space / ((float) (itime - start_time) / 1000f);
            System.out.printf("Curent_speed is: %.2f", current_speed);
            speedLabel.setText("Current Speed (WPM) : " + (int)Math.ceil(current_speed*60.0));
            speedLabel.paintImmediately(speedLabel.getVisibleRect());
            boolean check = send((int)current_speed);
            if(!check){
                JOptionPane.showMessageDialog(null, "Unable to send data to server");
            }
            users_word = currentInputTF.getText();
            users_word = users_word.trim();
            if (flag == 0) {
                correct_word = words.nextToken();
                flag = 1;
            }
            if (users_word.equals(correct_word)) {
                currentInputTF.setBackground(Color.green);
                System.out.println("word matched");
                count++;
                typedTextPane.setText(typedTextPane.getText()+ " " + correct_word);
                if (words.hasMoreTokens()) {
                    correct_word = words.nextToken();
                } else {                                         //The game is over.
                    end_time = (int) System.currentTimeMillis();
                    System.out.println("you are done");
                    float time = (end_time - start_time) / 1000f;
                    System.out.println("time is" + time + " " + space + " " + error_count);
                    float speed = (float) space / ( (float) time / 60);
                    Math.ceil(speed);
                    System.out.println("speed in words per minute: " + speed);
                    float accuracy = (float) ((float) (space - error_count) / (float) space) * 100;
                    accuracy = (float) Math.ceil(accuracy);
                    System.out.println("accuracy is" + accuracy);
                    JOptionPane.showMessageDialog(null, "Hey " + playerName + "\nyour accuracy is:" + accuracy + "   " + "\nyour typing speed is: " + Math.ceil(speed) + " WPM");
                    
                    //ADDING DETAILS OF THE PLAYER TO OUR DATABASE
                    try
                    {
                        Class.forName("java.sql.Driver");
                        Connection con=DriverManager.getConnection("jdbc:mysql://localhost/typerace","root","modi");
                        Statement stmt=con.createStatement();
                        String q="insert into user values('"+(playerName)+"','"+(accuracy)+"','"+(error_count)+"','"+(speed)+"',);";
                        stmt.executeUpdate(q);
                    }
                    catch(Exception e)
                    {
                        JOptionPane.showMessageDialog(this,e.getMessage());
                    }
                    assignRemark(accuracy, space);
                    this.setVisible(false);
                    GameStarter obj = new GameStarter();
                    obj.setVisible(true);
                }
            } else {
                error_count++;
                currentInputTF.setBackground(Color.red);
                JOptionPane.showMessageDialog(rootPane, "Typing error");
            }

            users_word = "";
            currentInputTF.setText("");
        }


    }//GEN-LAST:event_currentInputTFKeyTyped
    
    boolean send(int speed){
        try {
                out.writeUTF("" + (int)(Math.ceil(current_speed*60)));
                return true;
        } 
        catch (IOException ex) {
                Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);
                return false;
        }
    }
    
    void assignRemark(float accuracy, int speed){
        String remarks;
        if(accuracy == 100){
            remarks = "AWESOME accuracy.";
        }
        else if(accuracy > 90){
            remarks = "Great work at accuracy.";
        }
        else if(accuracy > 80){
            remarks = "Good job.";
        }
        else{
            remarks = "You need to work hard at accuracy.";
        }
        if(speed == 100){
            remarks += "\nlike a GOD.";
        }
        else if(speed > 50){
            remarks += "\nGreat speed. KEEP IT UP.";
        }
        else if(speed > 30){
            remarks += "Good job.";
        }
        else if(speed > 20){
            remarks += "Fine work";
        }
        else{
            remarks += "No comments :(";
        }
        JOptionPane.showMessageDialog(null, remarks);
    }
    
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField currentInputTF;
    private javax.swing.JButton finishButton;
    private javax.swing.JTable leaderboardTable;
    private javax.swing.JScrollPane paraDisplayer;
    private javax.swing.JTextPane paraTextPane;
    private javax.swing.JLabel playerNameLabel;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JScrollPane typedScrollPane;
    private javax.swing.JTextPane typedTextPane;
    // End of variables declaration//GEN-END:variables
}


class Input implements Runnable{
	public String message;
	DataInputStream in;
        Game object;
        int pID;
	public Input(DataInputStream in, Game o){
            this.in = in;
            this.object = o;
            pID = o.pID;
	}
	public void run(){
            while(true){
                try{
                    message = in.readUTF();
                    System.out.println("Data recieved:" + message);
                    decodeMessageWithUpdateLeaderboard(message);
                }catch(IOException e){
                    e.printStackTrace();
                    System.out.println("error here");
                    JOptionPane.showMessageDialog(null, "Server connection problem !!!");
                    System.exit(1);
                }
            }
	}

    public void decodeMessageWithUpdateLeaderboard(String message) throws NumberFormatException {
        char[] str = message.toCharArray();
        char[] temp = new char[5];  //temp string is saving speed
        String name = "";
        int speedWPM = 0;
        boolean flag = false;
        int i,j;
        loop:{
            for(i=0,j=0 ; i<str.length ; i++){
                if(flag == false){
                    if(str[i] != 'Ω'){      //'Ω' is used as seprator
                        name = name + str[i];
                    }
                    else{
                        flag = true;
                    }
                }
                else{
                    int digit = (int)str[i] - (int)'0';
                    if ((digit < 0) || (digit > 9)) throw new NumberFormatException();
                    speedWPM = digit + speedWPM * 10;
                }
            }
        }
        System.out.println("Speed of pid: " + pID + " is : " + speedWPM);
        object.UpdateLeaderboard(name, speedWPM, pID);
    }
}